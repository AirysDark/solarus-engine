Solarus is an open-source Zelda-like 2D game engine written in C++ and licensed
under GPL v3.
This file explains how to compile and install Solarus.


--------
Contents
--------

1  Overview
2  External dependencies
3  Compilation instructions
  3.1  Default settings
  3.2  Change the install directory
  3.3  More about the quest path
  3.4  SDL2 warning and luajit
  3.5  Windows developers
  3.6  Mac OS X developers
  3.7  OpenPandora


-----------
1  Overview
-----------

When it is installed, the project is divided in two parts:
- Solarus (the engine), which is an executable file written in C++ and called
  solarus.
- One (or several) quests, each quest corresponding to a game, represented as a
  directory called "data" or a zip archive called "data.solarus" or
  "data.solarus.zip" and containing all the data of the quest.
This readme is about compiling and installing solarus (the engine).
To execute it, you will also need a quest with all its game data files
(graphics, musics, sounds, scripts, dialogs, etc.).
A short sample quest is provided in the directory "sample_quest".
Our quests can be found on the development blog: http://www.solarus-games.org.


------------------------
2  External dependencies
------------------------

The build process of solarus uses cmake.
To compile Solarus, you obviously need a C++ compiler.
The following libraries are required to compile and to execute Solarus:

SDL2
SDL2main
SDL2_image
SDL2_ttf
openal
vorbisfile
modplug (0.8.8.4 or greater)
lua5.1
physfs

Note that another library is directly embedded in the source code:
snes_spc, an SPC music decoding library.

We maintain a fork of libmodplug 0.8.8.4 here:
https://github.com/christopho/libmodplug
Previous versions of libmodplug cause compilation problems as well as issues
like .it musics that do not correctly loop.


Linux developers:

Just install the corresponding packages. For example, with Ubuntu or Debian:

libsdl2-dev libsdl-image2-dev libsdl2-ttf-dev liblua5.1-0-dev
libphysfs-dev libopenal-dev libvorbis-dev libmodplug-dev


Windows developers:

Download the binary version of each one of the development libraries listed
above, on their official websites.
Install the header files (the .h files) in your compiler's include directory.
This may be something like
C:\Program Files\Microsoft Visual Studio 9.0\VC\include.
Similarly, install the library files (the .lib files) in your compiler's lib
directory.
This may be something like C:\Program Files\Microsoft Visual Studio 9.0\VC\lib.
Install the dynamic library files (the .dll files) in your system32 directory
(which may be C:\WINDOWS\system32).

The directory libraries/win32 contains some required static and dynamic
libraries that are not provided as binaries by their authors, but I don't
guarantee they are up-to-date.


Mac OS X developers:

The directory libraries/macosx contains some required static and dynamic
libraries that are not provided as binaries by their authors, but I don't
guarantee they are up-to-date.
The lua readme recommends to link statically against lua, so you shouldn't
embed it.
Also, the OpenAL framework is already part of the OSX system since 10.4, so you
don't have to embed this one too.
You can use both .dylib or .framework for the other ones, but just remember
that you have to check the version number, runpath search, architecture and
backward compatibility if you want to deploy your application.


---------------------------
3  Compilation instructions
---------------------------


3.1  Default settings
----------------------

To compile solarus with cmake, go to the solarus directory and type:

$ cmake .

This generates the appropriate Makefiles for your system.

Then you can compile the engine with:

$ make

and install it with (as root):

# make install

This installs the solarus binary in /usr/local/bin
(assuming that the install directory is /usr/local).

Then, to execute a quest, type

$ solarus path/to/your/quest

The argument must be a directory containing the "data" subdirectory of your
quest, or containing the "data.solarus" or "data.solarus.zip" archive of
your quest.


3.2  Change the install directory
---------------------------------

You may want to install solarus in another directory
(e.g. so that no root access is necessary). You can specify this directory
as a parameter of cmake:

$ cmake -DCMAKE_INSTALL_PREFIX=/home/your_directory .
$ make
$ make install

This installs the solarus binary like above, with the /usr/local prefix
replaced by the one you specified.


3.3  More about the quest path
------------------------------

There are several ways to make the engine find the data of a quest.
If the command-line argument is set (see above), then the engine looks into
the directory specified (and expects a "data" subdirectory or a "data.solarus"
or "data.solarus.zip" zip archive).
If the command-line argument is not specified, the preprocessor constant
DEFAULT_QUEST is used.
The DEFAULT_QUEST constant can be configured from your cmake command by using:

$ cmake -DDEFAULT_QUEST=/path/to/your/quest .

Finally, if the DEFAULT_QUEST constant is not set either, then the engine looks
into the current directory.

This DEFAULT_QUEST constant may be used if you want the engine to launch a
default quest when it is called without command-line arguments.
You can still launch another quest by using the command-line argument,
which overwrites the DEFAULT_QUEST constant.


3.4  SDL2 warning and luajit
----------------------------

Various developers have had trouble with SDL2 vesion 2.0.0.
If you are having trouble, use a later version.
  Debian developers:
    If you want SDL Debian packages for stable (wheezy) go to
    http://forum.solarus-games.org/index.php/topic,45.msg166.html#msg166.

Solarus requires, by default luajit.  Use of luajit is determined by the preprocessor constant
SOLARUS_USE_LUAJIT.
If you would like to turn off luajit, configure the constant from your cmake command by using:

$ cmake -DSOLARUS_USE_LUAJIT=0 .

3.5  Windows developers
-----------------------

I have managed to compile Solarus with Code::Blocks, without using CMake.
It is necessary to additionally link with libz.

If you compile with Visual C++, it should also work. You may need to add the
\Za flag to make Visual C++ respect the C++ standards: otherwise, you may
have a linker error with Music.h.

Here is my procedure with Code::Blocks:
- Create a C++ project.
- Add recursively the files from include and src to your project.
- Create an empty file include/config.h.
- In Build options > Compiler settings > defines, for the Release mode,
  add NDEBUG (very important for performance).
- Also in Build options, link to the following libraries in this order:
  mingw32, SDL2main, SDL2, SDL2_image, SDL2_ttf, lua5.1, physfs, OpenAL32,
  modplug, vorbis, vorbisfile. Some of them may be specified as relative
  file names of their DLL (in particular the ones I provide in the git
  repository). You are supposed to have installed the other ones in the
  compiler's environment.
- Build the game with Code::Blocks. I recommend to compile in Release mode
  for performance (because NDEBUG is set) and for executable size, unless
  you are a developer. The build error messages will tell you which headers
  and libraries are missing (itâ€™s hard to get them right in one try!).


3.6  Mac OS X developers
---------------------

* Compile on OSX
You can compile solarus just by doing the default setting with cmake, or generate the XCode project. 
Note that you probably want to pass the SOLARUS_BUNDLE flag too, which build the entire bundle instead of 
just the binary.

By default, you will build a binary with the maximum of compatibility that your OSX version can provide. 
You may want to produce an optimized (or exotic) binary instead of a standard one.
To do so, pass SOLARUS_SYSROOT, SOLARUS_DEPLOYMENT or/and SOLARUS_ARCH constants to
cmake to overload default settings, just like the following example :

$ cmake -DSOLARUS_SYSROOT="/Developer/SDKs/MacOSX10.5.sdk" -DSOLARUS_ARCH="ppc;i386;x86_64" -DSOLARUS_DEPLOYMENT=10.5 .


* Deploy on OSX
You will only build the executable with the default command.
To build the entire bundle, pass the following flag to cmake

$ cmake -DSOLARUS_BUNDLE="your_bundle_name" .

Which will install the application into a bundle named "your_bundle_name"
and place it in the /Applications folder.
A bundle is a .app suffixed folder, which typically contains 
the executable and all resources it needs.
Pass SOLARUS_BUNDLE_QUEST , SOLARUS_BUNDLE_INFOPLIST , 
SOLARUS_BUNDLE_ICON and SOLARUS_BUNDLE_VERSION flags 
in addition to SOLARUS_BUNDLE to specify your own configuration.
See ./cmake/modules/addCFBundleTarget.cmake for more details.

All non-Mac-native frameworks are placed in ${your_bundle_name}.app/Contents/Frameworks/
You have to do a little verification on them : check if dependencies search
path are correctly integrated, just by doing

$ otool -L /dylib/or/binary/I/want/to/check

It show the search path for every dependencies. Just look on the one you embed.
If one of them has a wrong path, you can modify it with

$ install_name_tool -id new_path /dylib/or/binary/I/want/to/modify
or
$ install_name_tool -change old_path new_path /dylib/or/binary/I/want/to/modify

The new_path string usually looks like "@rpath/The_dylib.dylib" or 
"@rpath/The_framework.framework/Version/A/The_binary" on Mac 10.5+.
Replace "@rpath/" by "@executable_path/../Frameworks/" on older OSX versions.

Instead of using this command on embed libraries, you should directly do it on system libraries,
which they are copied from, and then just do this step once.

Finally, see https://developer.apple.com/library/mac/#releasenotes/General/SubmittingToMacAppStore/_index.html#//apple_ref/doc/uid/TP40010572
to make sure you have a fully 10.8+ and Mac App Store compatible application.


* Add a quest into the OSX Bundle
Just copy the quest file (data.solarus, data.solarus.zip or data/) into ${your_bundle_name}.app/Contents/Resources/


3.7  OpenPandora
----------------

First, you need a working OpenPandora cross-compiling environment.
See the OpenPandora website: www.openpandora.org

To compile Solarus, we provide a CMake toolchain file:
cmake/pandora/PandoraToolchain.cmake
The role of this toolchain file is essentially to indicate the compiler to
CMake.
You may want to modify some paths in this toolchain file to better fit your
configuration.
Then, compile Solarus normally with CMake, indicating the toolchain file like
this:

$ mkdir pandora-build
$ cd pandora-build
$ cmake -DCMAKE_TOOLCHAIN_FILE=../cmake/pandora/PandoraToolchain.cmake ..
$ make


3.8 GCW-Zero
------------

First, you need a working GCW-Zero toolchain.  See the GCW-Zero development page at:
http://www.gcw-zero.com/develop to see how to set it up.

To compile Solarus, we provide a CMake toolchain file:
cmake/gcw-zero/gcw-zero.cmake
The role of this toolchain file is essentially to indicate the compiler to
CMake.
You may want to modify some paths in this toolchain file to better fit your
configuration.
Then, compile Solarus normally with CMake, indicating the toolchain file like
this:

$ mkdir gcw-zero-build
$ cd gcw-zero-build
$ cmake -DCMAKE_TOOLCHAIN_FILE=../cmake/gcw-zero/.cmake ..
$ make
