/**
\page quest_tileset_data_file Tileset definition file

Maps are composed of small bricks called "tiles".
Tiles are static entities: they cannot be moved or removed dynamically during
the game.
They are opposed to all dynamic entities such as enemies, doors, bushes,
switches, etc.
Each tile is a graphical element whose width and height are multiple of 8
pixels.
Tiles can overlap each other and have different sizes.
A tileset is a list of tiles that a map can use.
You can call it the skin of the map.
For example, there may exist a tileset for the outside world,
another one for houses,
another one for dungeons, etc.

The \c tilesets directory contains all tilesets and their images.
For a tileset with id \c xx,
there are three files:
- \c xx.tiles.png: The PNG image containing all tiles of this tileset.
- \c xx.dat: The definition of each tile in \c xx.tiles.png and their
  properties. We detail the syntax of this file below.
- \c xx.entities.png: some dynamic entities (i.e. other that tiles)
  such as doors and blocks sometimes also have a skin that depends
  on the tileset.
  A door inside a dungeon has different graphics and colors from a door
  inside a cave.
  This is the purpose of this file:
  \ref quest_sprite_data_file sprites that depend on the tileset pick their
  frames in this image.

We now specify the syntax of a tileset data file.

Solarus Quest Editor fully supports the edition of tilesets.
You should not have to edit tileset data files by hand unless you know what you
are doing.

Warning: The syntax below is obsolete! I need to update this
documentation page with the tileset data file format of Solarus 1.0.
The new syntax is more readable, more extensible and easier to parse.

The obstacle property of a tile pattern can have the following values
(these values are from the enumration Obstacle): 
- 0 (no obstacle): the tile is normal ground without obstacle
- 1 (obstacle): the tile cannot be traversed
- 2 (top-right): the upper-right half of the tile is an obstacle
- 3 (top-left): the upper-left half of the tile is an obstacle
- 4 (bottom-left): the lower-left half of the tile is an obstacle
- 5 (bottom-right): the lower-right half of the tile is an obstacle
- 6 (empty): there is no ground here: you should look at a lower layer
- 7 (top-right in water): the upper-right half of the tile is an obstacle,
    the rest is deep water
- 8 (top-left in water): the upper-left half of the tile is an obstacle,
    the rest is deep water
- 9 (bottom-left in water): the lower-left half of the tile is an obstacle,
    the rest is deep water
- 10 (bottom-right in water): the lower-right half of the tile is an obstacle,
    the rest is deep water
- -1 (deep water): the tile is some deep water (the hero drowns or swims)
- -2 (shallow water): the tile is shallow water (the hero may walk on it)
- -1 (deep water): the tile is some deep water (the hero drowns or swims)
- -2 (shallow water): the tile is shallow water (the hero may walk on it)
- -3 (hole): the tile is a hole (the hero falls into it)
- -4 (ladder): the tile is a ladder (the hero walks slowly on it)
- -5 (prickles): the tile is prickles (hurts the hero)
- -6 (lava): the tile is lava (hurts the hero)

A tile pattern also has an animation property:
- 0 (fixed pattern): the pattern has no animation (like most tiles).
- 1 (3-frame pattern): the pattern repeats an animation of three frames,
    with the sequence 0-1-2-0 or 0-1-2-1-0. Examples of use: water, lava,
    flowers.
- 2 (self scrolling pattern): when the camera moves, the pattern scrolls on
    itself (twice slower than the camera). This achieves the same effect as
    parallax scrolling, but the tile remains displayed at its position.
    However, this is limited to simple, repeatable patterns:
    you cannot make big scrolling backgrounds composed of different tiles
    (use parallax patterns for this)
    because no tile actually moves with the camera, they just scroll on
    themselves. Example of use: holes in dungeons.
- 3 (time scrolling pattern): the pattern scrolls on itself with time in a
    direction (not implemented yet, will probably be removed in the future).
- 4 (parallax scrolling pattern): when the camera moves, the place where the
    pattern is displayed also moves (twice slower) to give illusion of depth.
    Placing such tiles on your map can be tricky because at runtime, they are
    displayed elsewhere (except in the particular case where the camera is in
    (0,0), the top-left corner of the map).
    Note that collisions properties remain applied to the
    real position of the tile and not to where they are displayed.
    Usually, parallax scrolling is used for decoration only. 
    Example of use: a complex background panorama.
- 5 (3-frame + parallax): combines the properties of 3-frame animated
    patterns and parallax scrolling patterns.

Finally, a tile pattern has a default layer. This is the layer suggested by
the map editor when placing the tile onto a map:
- 0 (low layer): the tile is always displayed below the hero (e.g. lower rooms
    in dungeons)
- 1 (intermediate layer): the hero may be above or below the tile (e.g. most of
    the rooms in dungeons)
- 2 (high layer): the tile is above everything (e.g. a tree)

When you add a tile to a map with the map editor, it is placed on its default layer,
but then you may then change the layer.
Thus, the default layer property is only used by the map editor, not by the game.

A tileset description file is a clear text file.
Here is an example of such a file:

\verbatim
255	255	255
1	0	0	0	16	0	16	16
2	0	0	0	32	0	16	16
163	0	0	2	152	240	8	32
164	0	0	2	160	240	8	32
165	0	0	2	168	240	8	32
166	0	1	0	200	240	32	24
167	0	1	0	232	240	24	32
168	0	1	0	200	264	24	32
\endverbatim

The first line is the background color of the maps 
using this tileset (with the RGB notation).
Each one of the remaining lines describes a tile pattern.
The first element of the line is always the id of the tile pattern (an integer number),
the second one is the animation type, and 
the remaining part of the line depends on the number of frames of the pattern.

\section single_frame_patterns Single-frame patterns

Syntax of patterns having only one frame (i.e. fixed patterns,
self scrolling patterns, time scrolling patterns and parallax scrolling
patterns):

\verbatim
id   animation_type   obstacle   default_layer   x   y   width   height
\endverbatim

\c id identifies the pattern. \c animation_type indicates the type
of animation (can be 0, 2, 3 or 4).
\c obstacle and \c default_layer are the properties explained above.
\c x, \c y, \c width and \c height define the rectangle
of the tile pattern in the PNG image.

\section multi_frame_patterns Multi-frame patterns

Syntax of animations patterns with three frames (i.e. 3-frame patterns
and 3-frame + parallax patterns):

\verbatim
id   animation_type   obstacle   default_layer   animation_sequence   width   height   x1   y1   x2   y2   x3   y3
\endverbatim

\c animation_type indicates the type of animation (can be 1 or 5).
\c animation_sequence determines how the three frames of the animation are played:
1 means 0-1-2-0, and 2 means 0-1-2-1-0.
\c width, \c height, \c x1, \c y1, \c x2, \c y2, \c x3 and \c y3
define the location of the three rectangles in the PNG image (the size is the same for all rectangles).

*/


*/

