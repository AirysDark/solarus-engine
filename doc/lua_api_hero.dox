/**
\page lua_api_hero Hero

\tableofcontents

The hero is the character controlled by the player.
There is always exactly one hero on the current map.
The hero is automatically created by the engine:
you cannot create or remove him.

\section lua_api_hero_overview Overview

The name of the hero
(as returned by \ref lua_api_entity_get_name
"entity:get_name()") is always \c "hero".
Therefore, from a map script, you can access the hero with
<tt>map:get_entity("hero")</tt> or directly with the
\c hero variable (see \ref lua_api_map_get_entity "map:get_entity()"
for more details).

His size is always 16x16 pixels and his sprites
(tunic, sword, shield, shadow, etc.)
are managed by the engine.

We describe here the Lua API that you can use to change the hero's state.

\section lua_api_hero_inherited_methods Methods inherited from map entity

The hero is a particular \ref lua_api_entity "map entity".
Therefore, it inherits all methods from the type map entity.

See \ref lua_api_entity_methods to know these methods.

\section lua_api_hero_methods Methods of the type hero

The following methods are specific to the hero.

\subsection lua_api_hero_teleport hero:teleport(map_id, destination_name, [transition_style])

Teletransports the hero to a different place.
- \c map_id (string): Id of the \ref lua_api_map "map" to go to
  (may be the same map or another one).
- \c destination_name (string): Name of the \ref lua_api_destination
  "destination entity" to go to on that map,
  or the special keyword \c "_same" to go to the same coordinates.
- \c transition_style (string, optional): \c "immediate" (no transition effect)
  or \c "fade" (fade-out and fade-in effect). The default value is \c "fade".

\remark The transportation will occur at the next cycle of the engine's main
  loop. Therefore, your map is not unloaded immediately and your map script
  continues to work.

\subsection lua_api_hero_set_visible hero:set_visible([visible])

Hides or shows the hero.

The player continues to control the hero even when he is invisible.
He can fight enemies do everything as usual.
- \c visible (boolean, optional): \c true to show the hero, \c false to hide
  him. No value means \c true.

\subsection lua_api_hero_get_direction hero:get_direction()

Returns the direction of the hero's \ref lua_api_sprite "sprites".
- Return value (number): The direction of the hero's sprites, between \c 0
  (East) and 3 (South).

\remark: The direction of the hero's sprites may be different from both the
  direction pressed by the \ref lua_api_game_get_commands_direction "player's
  commands" and from the actual direction of the hero's \ref lua_api_movement
  "movement".

\subsection lua_api_hero_set_direction hero:set_direction(direction4)

Sets the direction of the hero's \ref lua_api_sprite "sprites".
- \c direction4 (number): The direction of the hero's sprites, between \c 0
  (East) and 3 (South).

\remark: The direction of the hero's sprites may be different from both the
  direction pressed by the \ref lua_api_game_get_commands_direction "player's
  commands" and from the actual direction of the hero's \ref lua_api_movement
  "movement".

\subsection lua_api_hero_save_solid_ground hero:save_solid_ground([x, y, layer])

Memorizes a position to go back to if the hero falls into a hole or other bad
ground.

This replaces the usual behavior which is going back to the last
solid position before the fall.
- \c x (number, optional): X coordinate to memorize (default: current position).
- \c y (number, optional): Y coordinate to memorize (default: current position).
- \c layer (number, optional): Layer to memorize (default: current position).

\subsection lua_api_hero_reset_solid_ground hero:reset_solid_ground()

Forgets a position that was previously memorized by
\ref lua_api_hero_save_solid_ground "hero:save_solid_ground()" (if any).

The initial behavior is restored: the hero will now get
back to where he was just before falling, instead going to of a memorized
position.

\subsection lua_api_hero_freeze hero:freeze()

Prevents the player from moving the hero until you call \ref
lua_api_hero_unfreeze "hero:unfreeze()".

\subsection lua_api_hero_unfreeze hero:unfreeze()

Restores the control to the player, typically after a call to
\ref lua_api_hero_freeze "hero:freeze()".

\subsection lua_api_hero_walk hero:walk(path, [loop, [ignore_obstacles]])

Makes the hero move with the specified path and a walking animation.
The player cannot control him during the movement.
- \c path (string): The path as a string sequence of integers. Each value
  is a number between 0 and 7 that represents a step (move of 8 pixels)
  in the path. 0 is East, 1 is North-East, etc.
- \c loop (boolean, optional): \c true to repeat the path once it is done (default \c
  false).
- \c ignore_obstacles (boolean, optional): \c true to allow the hero to traverse
  obstacles during this movement (default \c false).
  Make sure the movement does not end inside an obstacle.

\subsection lua_api_hero_start_jumping hero:start_jumping(direction8, distance, [ignore_obstacles])

Makes the hero jump towards the specified direction.
- \c direction8 (number): Direction of the jump, between \c 0 and \c 7
  (see \ref lua_api_jump_movement_set_direction8
  jump_movement:set_direction8()).
- \c distance (number): Distance of the jump in pixels
  (see \ref lua_api_jump_movement_set_distance jump_movement:set_distance()).
- \c ignore_obstacles (boolean, optional): \c true to allow the hero to
  traverse obstacles during this movement (default \c false).
  Make sure the movement does not end inside an obstacle.

\subsection lua_api_hero_start_treasure hero:start_treasure(treasure_item, [treasure_variant, [treasure_savegame_variable, [callback]]])

Gives a treasure to the player. The hero will brandish the treasure.
- \c treasure_name (string, optional): Kind of treasure to give
  (the name of an \ref lua_api_item "equipment item").
  The treasure must be an
  \ref lua_api_item_is_obtainable "obtainable" item.
- \c treasure_variant (number, optional): Variant of the treasure
  (because some \ref lua_api_item "equipment items"
  may have several variants).
  The default value is \c 1 (the first variant).
- \c treasure_savegame_variable (string, optional): Name of the boolean
  value that stores in the \ref lua_api_game "savegame"
  whether this treasure is found.
  No value means that the state of the treasure is not saved.
  It is allowed (though strange) to give the same saved treasure twice.
- \c callback (function, optional): A function to call when the treasure's
  dialog finishes.

\subsection lua_api_hero_start_victory hero:start_victory([callback])

Makes the hero brandish his sword for a victory.
- \c callback (function, optional): A function to call when the victory
  sequence finishes. If you don't define it, the default behavior is to
  restore control to the player.
  If you define it, you can do other things, like teletransporting the hero
  somewhere else. To restore the control to the player, call
  \ref lua_api_hero_unfreeze "hero:unfreeze()".

\subsection lua_api_hero_start_boomerang hero:start_boomerang(max_distance, speed, tunic_preparing_animation, sprite_name)

Makes the hero shoot a \ref lua_api_boomerang "boomerang".
- \c max_distance (number): Maximum distance of the boomerang's movement in
  pixels.
- \c speed (number): Speed of the boomerang's movement in pixels per second.
- \c tunic_preparing_animation (string): Name of the animation that the
  hero's tunic sprite should take while preparing the boomerang.
- \c sprite_name (string): Sprite animation set to use to draw the boomerang
  then.

\subsection lua_api_hero_start_bow hero:start_bow()

Makes the hero shoot an arrow with a bow.

\subsection lua_api_hero_start_hookshot hero:start_hookshot()

Makes the hero throw a hookshot.

\subsection lua_api_hero_start_running hero:start_running()

Makes the hero run.

\subsection lua_api_hero_start_hurt hero:start_hurt(source_x, source_y, life_points, magic_points)

Hurts the hero if possible, exactly like when he is touched by an
\ref lua_api_enemy "enemy".
The hurting animations and sounds of the hero are played.

This method has no effect if the hero is temporarily invincible
(because he was already hurt recently) or if the hero is in a state where
he cannot be hurt (for example when he is brandishing a treasure).
- \c source_x: X coordinate of whatever hurts the hero. Used to push the hero
  away from that source.
- \c source_y: Y coordinate of whatever hurts the hero. Used to push the hero
  away from that source.
- \c life_points: Base number of life points to remove (possibly \c 0).
  This number will be
  divided by the resistance ability level of the player (his tunic).
- \c magic_points: Number of magic points to remove (possibly \c 0).

\remark If you just want to remove some life to the player, without making the
  hurting animations and sounds of the hero, see \ref lua_api_game_remove_life
  "game:remove_life()".

\section lua_api_hero_inherited_events Events inherited from map entity

Events are callback methods automatically called by the engine if you define
them.

The hero is a particular \ref lua_api_entity "map entity".
Therefore, it inherits all events from the type map entity.

See \ref lua_api_entity_events to know these events.

\section lua_api_hero_events Events of the type hero

None.

*/

