/**
\page lua_api_enemy Enemy

\tableofcontents

An enemy is a bad guy that hurts the \ref lua_api_hero
"hero" when touching him.

This type of \ref lua_api_entity "map entity" can be declared in the
\ref lua_api_map_overview_files "map data file".
It can also be created dynamically with
\ref lua_api_map_create_enemy "map:create_enemy()".

\section lua_api_enemy_overview Overview

Enemies can exist in various breeds.
Each breed corresponds to a model of enemy with
its the behavior, its
\ref lua_api_sprite "sprites" and its
\ref lua_api_movement "movements".

The script file <tt>enemies/XXXX.lua</tt> defines the enemy breed
\c XXXX.
This script is executed every time an enemy of that model is created.
The corresponding Lua enemy object is passed as parameter
of that script. Use the Lua notation \c "..." to get this parameter and store
it into a regular variable.

Here is a basic example of script for the enemy breed \c "tentacle",
a simple model of enemy that just follows the hero.
\verbatim
-- First, we put the parameter into a variable called "enemy".
-- (In Lua, the notation "..." refers to the parameter(s) of the script.)
local enemy = ...

-- Called when the enemy was just created on the map.
function enemy:on_created()

  -- Define the properties of this enemy.
  self:set_life(1)
  self:set_damage(2)
  self:create_sprite("enemies/tentacle")
  self:set_size(16, 16)
  self:set_origin(8, 13)
end

-- Called when the enemy should start or restart its movement
-- (for example if the enemy has just been created or was just hurt).
function enemy:on_restarted()

  -- Create a movement that walks toward the hero.
  local m = sol.movement.create("target")
  m:set_speed(32)
  self:start_movement(m)
end
\endverbatim

Such a script is all what you need to define a model of enemy.
The engine handles for you the detection of collisions with the
\ref lua_api_hero "hero" or his weapons,
hurts the hero or the enemy when appropriate,
removes the enemy when it gets killed, etc.
But you can customize everything using the API described on this page,
like what kind of attacks can hurt the enemy.
You can also make complex enemies composed of several sprites, and set
different behavior to each sprite. This is very useful to program a boss.

Basic enemies often have the same behavior.
To avoid duplication of code,
you can factorize some code into a generic file
and call it from each enemy breed script
with \c require(),
\ref lua_api_main_do_file "sol.main.do_file()"
or 
\ref lua_api_main_load_file "sol.main.load_file()".

\section lua_api_enemy_inherited_methods Methods inherited from map entity

Enemies are particular \ref lua_api_entity "map entities".
Therefore, they inherit all methods from the type map entity.

See \ref lua_api_entity_methods to know these methods.

\section lua_api_enemy_methods Methods of the type enemy

The following methods are specific to enemies.

\subsection lua_api_enemy_get_breed enemy:get_breed()

Returns the breed (the model) of this enemy.
- Return value (string): The enemy's breed.

\subsection lua_api_enemy_get_life enemy:get_life()

Returns the current life of this enemy.
- Return value (number): Number of health points of the enemy.

\subsection lua_api_enemy_set_life enemy:set_life(life)

Sets the current life of this enemy.

The default value is \c 1.
- \c life (number): Number of health points to set. A value of \c 0
  kills the enemy.

\subsection lua_api_enemy_add_life enemy:add_life(life)

Adds some life to the enemy.
- \c life (number): Number of health points to add.

\remark Equivalent to <tt>enemy:set_life(enemy:get_life() + life)</tt>

\subsection lua_api_enemy_remove_life enemy:remove_life(life)

Removes some life from the enemy.
- \c life (number): Number of health points to remove.

\remark Equivalent to <tt>enemy:set_life(enemy:get_life() - life)</tt>

\subsection lua_api_enemy_get_damage enemy:get_damage()

Returns the number of life points that the enemy removes from the
\ref lua_api_hero "hero" when touching him.
This number will be
divided by the level of resistance ability of the player (his tunic).
- Return value (number): Damage inflicted to the hero.

\subsection lua_api_enemy_set_damage enemy:set_damage(damage)

Sets the number of life points that the enemy removes from the
\ref lua_api_hero "hero" when touching him.
This number will be
divided by the level of resistance ability of the player (his tunic).

The default value is \c 1.
- \c damage (number): Damage inflicted to the hero.

\subsection lua_api_enemy_get_magic_damage enemy:get_magic_damage()

Returns the number of magic points that the enemy removes from the
\ref lua_api_hero "hero" when touching him.
- Return value (number): Magic damage inflicted to the hero.

\subsection lua_api_enemy_set_magic_damage enemy:set_magic_damage(magic_damage)

Sets the number of magic points that the enemy removes from the
\ref lua_api_hero "hero" when touching him.

The default value is \c 0.
- \c magic_damage (number): Magic damage inflicted to the hero.

\subsection lua_api_enemy_is_pushed_back_when_hurt enemy:is_pushed_back_when_hurt()

Returns whether the enemy is pushed away when it is hurt.
- Return value (boolean): \c true if the enemy is pushed away when hurt.

\subsection lua_api_enemy_set_pushed_back_when_hurt enemy:set_pushed_back_when_hurt(pushed_back_when_hurt)

Sets whether the enemy should be pushed away when it is hurt.

The default value is \c true.
- \c pushed_back_when_hurt (boolean): \c true to make the enemy pushed away
  when hurt.

\subsection lua_api_enemy_get_push_hero_on_sword enemy:get_push_hero_on_sword()

Returns whether the
\ref lua_api_hero "hero" is pushed away when he hits
this enemy with his sword.
- Return value (boolean): \c true if the hero is pushed away when hitting
  this enemy with his sword.

\subsection lua_api_enemy_set_push_hero_on_sword enemy:set_push_hero_on_sword(push_hero_on_sword)

Sets whether the
\ref lua_api_hero "hero" should be pushed away when he hits
this enemy with his sword.

The default value is \c false.
- \c push_hero_on_sword (boolean): \c true to push the hero away when
  hitting this enemy with his sword.

\subsection lua_api_enemy_get_can_hurt_hero_running enemy_get_can_hurt_hero_running()

Returns whether this enemy can hurt the
\ref lua_api_hero "hero" even when the hero is running.
- Return value (boolean): \c true if the hero can be hurt by this enemy
  even when running.

\subsection lua_api_enemy_set_can_hurt_hero_running enemy:set_can_hurt_hero_running(can_hurt_hero_running)

Sets whether this enemy can hurt the
\ref lua_api_hero "hero" even when the hero is running.

The default value is \c false.
- \c can_hurt_hero_running (boolean): \c true so that the hero can be hurt
  by this enemy even when running.

\subsection lua_api_enemy_get_hurt_style enemy:get_hurt_style()

Returns the style of sounds and animations to play when this enemy is hurt.
- Return value (string): \c "normal", \c "monster" or \c "boss".

\subsection lua_api_enemy_set_hurt_style enemy:set_hurt_style(hurt_style)

Sets the style of sounds and animations to play when this enemy is hurt.
The default values are \c "normal" for usual enemies
and \c "boss" for bosses and minibosses.
- \c hurt_style (string): \c "normal", \c "monster" or \c "boss".

\subsection lua_api_enemy_get_can_attack enemy:get_can_attack()

Returns whether this enemy can currently attack the
\ref lua_api_hero "hero".
- Return value (boolean): \c true if the enemy can currently attack the hero.

\subsection lua_api_enemy_set_can_attack enemy:set_can_attack(can_attack)

Sets whether this enemy can currently attack the
\ref lua_api_hero "hero".

When the enemy restarts after being hurt, \c can_attack is always
set to \c true.
- \c can_attack (boolean): \c true to allow the enemy to attack the hero.

\subsection lua_api_enemy_get_minimum_shield_needed enemy:get_minimum_shield_needed()

Returns the level of protection (if any)
that stops attacks from this enemy.

If the player has a protection
\ref lua_api_game_get_ability "ability" greater than or equal to
this value, he will stop attacks from this enemy if he is facing the direction
of the enemy.
The special value of \c 0 means that attacks cannot be stopped with the
protection ability.
Returns the required level of protection to stop attacks from this enemy.
- Return value (number): The level of protection that stops attacks from
  this enemy. A value of \c 0 means that the hero cannot stop the attacks.

\subsection lua_api_enemy_set_minimum_shield_needed enemy:set_minimum_shield_needed(minimum_shield_needed)

Sets a level of protection that stops attacks from this enemy.

If the player has a protection
\ref lua_api_game_get_ability "ability" greater than or equal to
this value, he will stop attacks from this enemy if he is facing the direction
of the enemy.
The special value of \c 0 means that attacks cannot be stopped with the
protection ability.
The default value is \c 0.
- \c minimum_shield_needed (number): The level of protection that stops
  attacks from this enemy.
  A value of \c 0 means that the hero cannot stop the attacks.

\subsection lua_api_enemy_set_attack_consequence enemy:set_attack_consequence(attack, consequence)

Sets how this enemy reacts when it receives an attack.

Recall that enemies may have several \ref lua_api_sprite "sprites".
This attack consequence applies to all sprites of the enemy,
unless the ones that you override with
\ref lua_api_enemy_set_attack_consequence_sprite
"enemy:set_attack_consequence_sprite()".
- \c attack (string): Name of an attack against the enemy:
  "sword", "thrown_item", "explosion", "arrow", "hookshot",
  "boomerang" or "fire".
- \c consequence (number or string): Indicates what happens when this enemy
  receives the attack. It may be:
  - A positive integer: The enemy is hurt and loses this number of life points.
  - \c "ignored": Nothing happens. The weapon (if any) traverses the enemy.
  - \c "protected": The enemy stops the attack. A attack failure sound is
    played.
  - \c "immobilize": The enemy is immobilized for a few seconds.
  - \c "custom": Event \ref lua_api_enemy_on_custom_attack_received
    "enemy:on_custom_attack_received()" is called.

\subsection lua_api_enemy_set_attack_consequence_sprite enemy:set_attack_consequence_sprite(sprite, attack, consequence):

Sets how this enemy reacts when one of its \ref lua_api_sprite "sprites"
receives an attack.
This method overrides for a particular sprite the attack consequences defined
by \ref lua_api_enemy_set_attack_consequence
"enemy:set_attack_consequence()".
- \c sprite (\ref lua_api_sprite "sprite"): A sprite of this enemy.
- \c attack (string): Name of an attack against the enemy:
  "sword", "thrown_item", "explosion", "arrow", "hookshot",
  "boomerang" or "fire".
- \c consequence (number or string): Indicates what happens when this sprite
  receives the attack. The possible values are the same as in
  \ref lua_api_enemy_set_attack_consequence
  "enemy:set_attack_consequence()".

\subsection lua_api_enemy_set_default_attack_consequences enemy:set_default_attack_consequences()

Restores the default attack consequences for this enemy and its sprites.

\subsection lua_api_enemy_set_default_attack_consequences_sprite enemy:set_default_attack_consequences_sprite(sprite)

Restores the default attack consequences for a particular sprite of this enemy.
- \c sprite (\ref lua_api_sprite "sprite"): A sprite of this enemy.

\subsection lua_api_enemy_set_invincible enemy:set_invincible()

Makes this enemy ignore all attacks.

Equivalent to calling
<tt>lua_api_enemy_set_attack_consequence(attack, "ignored")</tt>
for each attack.

\subsection lua_api_enemy_set_invincible_sprite enemy:set_invincible_sprite(sprite)

Makes a sprite of this enemy ignore all attacks.

Equivalent to calling
<tt>lua_api_enemy_set_attack_consequence_sprite(sprite, attack, "ignored")</tt>
for each attack.
- \c sprite (\ref lua_api_sprite "sprite"): A sprite of this enemy.

\subsection lua_api_enemy_has_layer_independent_collisions enemy:has_layer_independent_collisions()

Returns whether this enemy can detect collisions with entities
even if they are not on the same layer.

By default, enemies can only have collisions with entities on the
same layer.
- Return value (boolean): \c true if this enemy can
  detect collisions even with entities on other layers.

\subsection lua_api_enemy_set_layer_independent_collisions enemy:set_layer_independent_collisions([independent])

Sets whether this enemy can detect collisions with entities
even if they are not on the same layer.

By default, enemies can only have collisions with entities on the
same layer.
If you set this property to \c true, this enemy will be able to hurt
the \ref lua_api_hero "hero" even from a different layer.
- \c independent (boolean, optional): \c true to make this enemy detect
  collisions even
  with entities on other layers. No value means \c true.

\subsection lua_api_enemy_set_treasure enemy:set_treasure([item_name, [variant, [savegame_variable]]])

Sets the \ref lua_api_pickable
"pickable treasure" that will drop this enemy when killed.
- \c item_name (string, optional): Name of an \ref lua_api_item
  "equipment item".
  \c nil or no value means no item.
- \c variant (number, optional): Variant of this equipment item
  (\c 1 means the first variant). The default value is \c 1.
- \c savegame_variable (string, optional): Name of the boolean
  value that stores in the \ref lua_api_game "savegame"
  whether the treasure dropped is found.
  \c nil or no value means that the treasure is not saved.

\subsection lua_api_enemy_get_obstacle_behavior enemy:get_obstacle_behavior()

Returns how the enemy behaves with obstacles.
- Return value (string): \c "normal", \c "flying" or \c "swimming".

\subsection lua_api_enemy_set_obstacle_behavior enemy:set_obstacle_behavior(obstacle_behavior)

Sets how this enemy should behave with obstacles.
The default value is \c "normal".
\c "swimming" allow the enemy to traverse water.
\c "flying" allows the enemy to traverse holes, water and lava.
- \c obstacle_behavior (string): \c "normal", \c "flying" or \c "swimming".

\subsection lua_api_enemy_set_size enemy:set_size(width, height)

Sets the size of the bounding box of this enemy.

The default value is 16x16 pixels.
This is the effective size used to detect obstacles when moving,
but the \ref lua_api_sprite "sprite"
of the enemy may be larger, especially for a boss.
- \c width (number): Width of the enemy in pixels.
- \c height (number): Height of the enemy in pixels.

\subsection lua_api_enemy_set_origin enemy:set_origin(origin_x, origin_y)

Sets the origin point of this enemy, relative to the top-left corner
of its bounding box.

This origin point property allows entities of different sizes to have
comparable reference points that can be used by the engine.
Indeed, when two enemies overlap, the engine needs to determine which one
has to be displayed first
(it is always the one with the lowest Y coordinate).
Sometimes, the engine also needs to compute an angle between two entities,
for example to push away an enemy that was just hit.
Using the top-left corner of their bounding box would not give the correct
angle (unless both entities had the same size).

The origin point is also the point of synchronization of an entity with its
\ref lua_api_sprite "sprites" (because again, an entity that has a given
size may have sprites with different sizes).

The default values is \c 0x0 and should be changed for most enemies.
See \ref lua_api_entity_get_origin "entity:get_origin()" for more explanations
about the origin point.
- \c origin_x (number): X coordinate of the origin point in pixels,
  relative to the top-left corner of the enemy's bounding box.
- \c origin_y (number): Y coordinate of the origin point in pixels,
  relative to the top-left corner of the enemy's bounding box.

\subsection lua_api_enemy_restart enemy:restart()

Restarts this enemy.

This plays animation \c "walking" on its
\ref lua_api_sprite "sprites"
and calls the event \ref lua_api_enemy_on_restarted "enemy:on_restarted()".

\subsection lua_api_enemy_hurt enemy:hurt(life_points)

Hurts this enemy if possible.

The enemy is not hurt if he is currently invulnerable
(for example because he is already in the process of being hurt).
- \c life_points (number): Number of life points to remove from the enemy.

\subsection lua_api_enemy_get_sprite enemy:get_sprite()

Returns the \ref lua_api_sprite "sprite" of this enemy,
as created by
\ref lua_api_enemy_create_sprite "enemy:create_sprite()".
- Return value (\ref lua_api_sprite "sprite"): The first sprite created for
 this enemy.

\remark If the enemy has several sprites, the first one created is returned.
  For the other sprites, you cannot use this function.
  However, you can just store the return values of your calls to
  \ref lua_api_enemy_create_sprite "enemy:create_sprite()".

\subsection lua_api_enemy_create_sprite enemy:create_sprite(sprite_name)

Creates a \ref lua_api_sprite "sprite" for this enemy.
- \c sprite_name (string): Name of the animation set of the
  sprite to create.
- Return value (\ref lua_api_sprite "sprite"): The sprite created.

\remark If you don't create a sprite, your enemy will be invisible.

\subsection lua_api_enemy_remove_sprite enemy:remove_sprite([sprite])

Removes and destroys a
\ref lua_api_sprite "sprite" of this enemy.

The sprite must have been created before by
\ref lua_api_enemy_create_sprite "enemy:create_sprite()".
- \c sprite (\ref lua_api_sprite "sprite"): The sprite to remove.
  The default value is the first sprite that was created.

\subsection lua_api_enemy_create_enemy enemy:create_enemy(name, breed, x, y, [layer])

Creates another enemy on the \ref lua_api_map "map",
specifying its coordinates as relative to the current enemy.
- \c name (string): Name identifying the new entity.
  It must be unique in the map.
- \c breed (string): Model of enemy to create.
- \c x (number): X coordinate of the new enemy, relative to the current one.
- \c y (number): Y coordinate of the new enemy, relative to the current one.
- \c layer (number, optional): Layer of the new enemy
  (\c 0: low, \c 1: intermediate, \c 2: high).
  By default, the layer is the one of the current enemy.
- Return value (enemy): The enemy created.

\section lua_api_enemy_inherited_events Events inherited from map entity

Events are callback methods automatically called by the engine if you define
them.

Enemies are particular \ref lua_api_entity "map entities".
Therefore, they inherit all events from the type map entity.

See \ref lua_api_entity_events to know these events.

\section lua_api_enemy_events Events of the type enemy

The following events are specific to enemies.

\subsection lua_api_enemy_on_update enemy:on_update()

Called at each cycle while this enemy is alive.

\remark As this function is called at each cycle, it is recommended to use other
solutions when possible, like \ref lua_api_timer "timers" and other events.

\subsection lua_api_enemy_on_suspended enemy:on_suspended(suspended)

Called when the \ref lua_api_map "map"
has just been suspended or resumed.

The map is suspended by the engine in a few cases, like when the \ref
lua_api_game "game" is
paused or when the camera is being moved by a script.
When this happens, all \ref lua_api_entity "map entities" stop moving and most
\ref lua_api_sprite "sprites" stop their animation.
- \c suspended (boolean): \c true if the map was just suspended, \c
  false if it was resumed.

\subsection lua_api_enemy_on_created enemy:on_created()

called when this enemy has just been created on the
\ref lua_api_map "map".

\subsection lua_api_enemy_on_enabled enemy:on_enabled()

called when this enemy has just been
\ref lua_api_entity_is_enabled "enabled".

\subsection lua_api_enemy_on_disabled enemy:on_disabled()

called when this enemy has just been
\ref lua_api_entity_is_enabled "disabled".

\subsection lua_api_enemy_on_restarted enemy:on_restarted()

Called when this enemy should start or restart its
\ref lua_api_movement "movement" because
something happended
(for example the enemy has just been created,
or it was just hurt).
If your enemy should move, this is the right place
to create its movement.

\subsection lua_api_enemy_on_pre_draw enemy:on_pre_draw()

Called just before the enemy is drawn on the map.
You may display additional things below the enemy.

\subsection lua_api_enemy_on_post_draw enemy:on_post_draw()

Called just after the enemy is drawn on the map.
You may display additional things above the enemy.

\subsection lua_api_enemy_on_position_changed enemy:on_position_changed(x, y, layer)

Called when the coordinates of this enemy have just changed.
- \c x (number): The new X coordinate of the enemy.
- \c y (number): The new Y coordinate of the enemy.
- \c layer (number): The new layer of the enemy.

\subsection lua_api_enemy_on_obstacle_reached enemy:on_obstacle_reached(movement)

Called when the \ref lua_api_movement "movement"
of this enemy was stopped because of an obstacle.

When an obstacle is reached, this event is called instead of
\ref lua_api_enemy_on_position_changed "enemy:on_position_changed()".
- \c movement (\ref lua_api_movement "movement"): The movement of the enemy.

\subsection lua_api_enemy_on_movement_changed enemy:on_movement_changed(movement)

Called when some characteristics of this enemy's
\ref lua_api_movement "movement"
(like the speed or the angle) have just changed.
- \c movement (\ref lua_api_movement "movement"): The movement of the enemy.

\subsection lua_api_enemy_on_movement_finished enemy:on_movement_finished()

Called when the
\ref lua_api_movement "movement"
of the enemy is finished (if there is an end).

\subsection lua_api_enemy_on_collision_enemy enemy:on_collision_enemy(other_enemy, other_sprite, my_sprite)

Called when a \ref lua_api_sprite "sprite"
of this enemy overlaps another enemy's sprite.
- \c other_enemy (enemy): Another enemy.
- \c other_sprite (\ref lua_api_sprite "sprite"): A sprite of that other enemy.
- \c my_sprite (\ref lua_api_sprite "sprite"): A sprite of the current enemy.

\subsection lua_api_enemy_on_custom_attack_received enemy:on_custom_attack_received(attack, sprite)

Called when this enemy receives an attack with a custom effect.

This function is called if you
\ref lua_api_enemy_set_attack_consequence "consequence of the attack"
to \c "custom".
You have to define what happens, for example hurting the enemy, making a
special reaction, etc.
- \c attack (string): The attack that was received:
  \c "sword", \c "thrown_item", \c "explosion",
  \c "arrow", \c "hookshot", \c "boomerang" or \c "fire".
- \c sprite (\ref lua_api_sprite "sprite"): The sprite of this enemy
  that receives the attack, or \c nil if the attack does not come from a
  pixel-precise collision.

\subsection lua_api_enemy_on_hurt enemy:on_hurt(attack, life_lost)

Called when this enemy was just hurt.
- \c The attack that was received:
  \c "sword", \c "thrown_item", \c "explosion",
  \c "arrow", \c "hookshot", \c "boomerang" or \c "fire".
- \c life_lost (number): The number of life points just lost by the enemy.

\subsection lua_api_enemy_on_dying enemy:on_dying()

Called when the enemy's life comes to \c 0.
At this point, the dying animation of the enemy starts and a sound
is played.
The enemy will be removed from the map when the dying animation ends.

\subsection lua_api_enemy_on_dead enemy:on_dead()

Called when the enemy's dying animation is finished.

\subsection lua_api_enemy_on_immobilized enemy:on_immobilized():

Called when the enemy is immobilized.

*/

