/**
\page quest Solarus 1.0 - Quest data files specification

We explain here how a quest is built.

A quest is a data package that may be run by the Solarus C++ engine
(the Solarus executable file).

When you run the \c solarus executable file, it needs the path of the quest
to launch.
This can be done at runtime by specifying the path as a command-line argument:
<tt>solarus path/to/your/quest</tt>.
If the quest path is not specified, the current directory is considered by
default, unless you compiled Solarus with another default quest path.

The quest in this path may have one of the following two forms:
- A zip archive called \c data.solarus and containing all data of your quest.
  This archive form is useful when your quest is finished and you distribute it
  to people.
- A directory called \c data and containing all data of your quest.
  This form is handy when you are developing your quest. It is also the only
  possible form to edit your quest with Solarus Quest Editor.
  In fact, when you modify a map in the editor, you don't even need to restart
  the game.

The data files represent all resources used by both the engine and the quest,
such as sounds, musics, images, sprites, dialogs, maps and Lua scripts.
We specify here the details for all those files.

Here is the full structure of the \c data directory / \c data.solarus
archive of a quest and the syntax of each file.

- \subpage quest_properties_file "quest.dat": global properties of your quest.
- \subpage quest_resource_file "project_db.dat": list of all resources
  (maps, sprites, enemies...) with their id and human-readable name.
- \subpage quest_main_script "main.lua": main Lua script of your quest.
- \c *.lua: other Lua scripts, possibly organized in subdirectories.
- \subpage quest_sounds "sounds/": contains all sound effects.
  - \c sounds/*.ogg: your sound files.
- \subpage quest_musics "musics/": contains all musics.
  - \c musics/*.{ogg, it, spc}: your music files.
- \c text/: contains the fonts used to draw text in your quest.
  - \subpage quest_font_list_file "text/fonts.dat": the list of fonts and
    their properties.
  - \c text/*.{ttf, fon, png, ...}: your font files.
- \c languages/: contains the language-specific files.
  - \subpage quest_language_list_file "languages/languages.dat": list of
    supported languages.
  - \subpage quest_language_strings "languages/xx/text/strings.dat": strings of
    language \c "xx".
  - \subpage quest_language_dialogs "languages/xx/text/dialogs.txt": dialogs of
    language \c "xx".
  - \subpage quest_language_images "languages/xx/images/": contains all images
    that have text in them in language \c "xx".
    - \c languages/xx/images/*.png: your language-specific images.
- \c sprites/: contains all animated sprites, possibly organized in
  subdirectories.
  - \subpage quest_sprite_data_file "sprites/xx.dat": definition of sprite
    \c "xx".
  - \c sprites/*.png: images used by your sprites (except the
    tileset-dependent ones).
- \c maps/: contains all maps of your quest.
  - \subpage quest_map_data_file "maps/xx.dat": definition of map \c "xx" and all
    its entities.
  - \subpage quest_map_script_file "maps/xx.lua": Lua script of map \c "xx".
- \c tilesets/: contains all tilesets available to maps.
  - \subpage quest_tileset_data_file "tilesets/xx.dat": definition of tileset
    \c "xx" and all its tile patterns.
  - \subpage quest_tileset_tiles_image "tilesets/xx.tiles.png": image with all
    tile patterns of tileset \c "xx".
  - \subpage quest_tileset_entities_image "tilesets/xx.entities.png": image
    with all tileset-dependent sprite animations for tileset \c "xx".
- \c items/: contains all equipment item Lua scripts.
  - \subpage quest_item_script "items/xx.lua": Lua script that defines the
    properties and the behavior of equipment item \c "xx".
- \c enemies/: contains all enemy Lua scripts.
  - \subpage quest_enemy_script "enemies/xx.lua": Lua script that defines the
    properties and the behavior of the enemy model \c "xx".

\section quest_root Root directory

Three files are directly placed inside the \c data directory:
- the quest properties files \ref quest_properties_file "quest.dat",
- the list of resources \ref quest_resource_file "project_db.dat",
- the main Lua script \ref quest_main_script "main.lua".

\subsection quest_properties_file Quest properties file

Some general information regarding your quest are stored in the quest
properties file \c quest.dat.

\c quest.dat is mandatory: if this file don't exist, the engine considers that
there is no quest in the directory.
It is a Lua data file (i.e. without the Lua API)
that contains a single call to a \c quest(properties) function.
\c properties is a table that describes the properties of your quest.
Its key-value pairs must be:
- \c solarus_version (string): Version of the engine your data files are
  compatible with. This string should be a major and minor version, for
  example "1.0". You can indicate a full version string, including
  the patch number (like "1.0.0") but the patch number will be ignored.
  Patch versions are ignored since they don't break compatibility.
  The latest version is \c "1.0".
- \c write_dir (string, optional): Directory where your quest will write its
  savegames and setting files. It will be a subdirectory of
  <tt>'$HOME/.solarus/'</tt>, automatically created by the engine.
  Its name should identify your quest, to avoid confusion with
  other Solarus quests that might also be installed on the user's machine.
  You must define it before you can use savegames or setting files.
- \c title_bar (string, optional): Title of the window. You should probably
  put the title of your game here.

Example of \c quest.dat file:

\verbatim
quest{
  solarus_version = "1.0",
  write_dir = "my_quest",
  title_bar = "My incredible quest",
}
\endverbatim

\subsection quest_resource_file Resource list

The \c project_db.dat file is used by Solarus quest editor.
This file contains a list of all resources (maps, musics, sprites, items,
enemies, etc.) of the quest and their user-friendly names.
The quest editor needs this file to provide graphical components that let the
user choose a resource in a list of user-friendly names.
Each resource usually corresponds to a data file.

For instance, when the user creates a teletransporter on the map, a graphical
list lets him choose the destination map of the teletransporter.
This list contains the user-friendly name of each map.

Note that user-friendly names are only useful in the quest editor.
The engine does not use them.

We give here the syntax of \c project_db.dat.
This is a text file where each line represents a single resource element.
Each line has the following syntax:

\verbatim
resource_type        id        user-friendly name
\endverbatim

\c resource_type, \c id and <tt>user-friendly name</tt> can be separated
by an arbitrary number of spaces or tab characters.
\c resource_type is an integer identifying the type of resource (a map,
a music, a sprite, etc.).
\c id is a value that identifies the element. The id allows to find the
resource file(s). It may not contain spaces.
<tt>user-friendly name</tt> is a name that describes the resource for the
quest developers and may contain spaces.
The quest editor will display this name to the user, but will use the id
internally.

The current types of resources are:
- 0: a map (the id is the map file name without its extension),
- 1: a tileset (the id is the tileset file name without its extension),
- 2: a music (the id is the music file name without extension),
- 3: a sprite (the id is the sprite file name without extension),
- 4: a sound (the id is the music file name without extension),
- 5: an item (the id is the name of the item's Lua script without its extension),
- 6: an enemy (the id is the name of the enemy's Lua script without its extension),
- 7: a language (the id is the language code).

In the quest editor, you can add, remove, rename and change the id of resources
from the quest tree. Therefore, you probably don't need to edit this file by hand.

\subsection quest_main_script Main Lua script

This is the main Lua script of your quest.
Everything starts from here at runtime.
You will probably make a title screen and then start a game.
See the \ref lua_api "Lua API" for more information about Lua scripting
in Solarus.

\section quest_sound Sounds

The \c sounds directory contains all small sound effects used by both the
engine and the quest.
A sound file must have the extension \c .ogg (Ogg Vorbis).

\section quest_music Musics

The \c musics directory contains all musics used by both the engine and the
quest.
For now, the following formats are recognized:
- OGG: Ogg Vorbis audio file,
- IT: Impulse Tracker Module,
- SPC: a Super NES original music file (not recommended).

The SPC format is supported but not recommended.
It is recommended to convert SPC musics to IT musics, because decoding
the IT format is much less CPU-consuming than SPC.

Future releases may support more music formats. You can ask me.

\section quest_font Fonts

The \c text directory contains the font files used by the engine.
The formats recognized are the ones supported by the SDL_ttf library,
including .ttf and .fon.
It also contains a \c fonts.dat file with the syntax of an ini file.
An example is self-speaking:

\verbatim
# This file defines the fonts available to the game engine.
# The engine relies on 3 fonts named 'dialog', 'dialog_big' and 'fixed'.
# The main purpose of this file is to make the engine independent from the font file names.

[dialog]
# the font used in dialog boxes
file = text/la.ttf
size = 11
default = true

[dialog_big]
# same as 'dialog' but bigger
file = text/la.ttf
size = 18

[fixed]
# fixed-width font used in the menus
file = text/fixed8.fon
size = 11
\endverbatim

\section languages Language-specific files

Language features allow to translate a quest.
The language selected is saved independently of the savegames.
All language-specific data files (strings, dialogs and sprites)
are saved in the \c languages directory.

The \c languages/languages.lua file gives the list of the supported language
and indicates the default one.
We give here an example of this file:

\verbatim
language{
  code = "fr",
  name = "Français"
}

language{
  code = "en",
  name = "English",
  default = true
}

language{
  code = "de",
  name = "Deutsch"
}
\endverbatim

The value \c code identifies the language.
It represents the name of the directory
containing the language-specific files of this translation.
The value \c name is a human-readable name for the language.
You can show this name to the user in your language selection menu.

The directory \c languages is divided into several directories
(one for each translation).
Then, there are two subdirectories:
- \c text: contains all strings and game dialogs localized in this language.
See the \subpage dialog_syntax page to know the syntax of these files.
- \c images: contains the images showing some text that needs to be translated.

\section sprites Sprites

The \c sprites directory contains all images (animated or not) used by both the game and the engine.
It also contains the sprite description files.
The syntax of these files is specified in the \subpage sprite_syntax page.

\section maps Maps

The \c maps directory contains the full description and the script of each map.
It also includes a subdirectory called \c dungeons that gives specific information about the dungeons.

Each map is specified with two files. Let us call XXXX the id of the map (which is an integer number).
The id is represented with four digits in the file names.
- \c mapXXXX.dat: full description of the map content (the walls, the enemies, the NPCs, the chests…).
See the \subpage map_syntax page for the detailed specification of the map file syntax.
- \c mapXXXX.lua: script of the map in Lua language.
The script triggers dynamic events in this map, such as opening a door, making enemies appear, etc.
See the \ref lua_api for scripting your maps.

In release versions, only
the compiled script (\c .luac) is used. 
In debug versions, the engine first tries to open the source file (\c .lua) if it exists.
Thus, you don't need to compile your scripts to test them when you make a change.
The Lua source files of the zsdx quest are available on the
<a href="http://www.solarus-games.org/source-code">subversion</a> repository. 

The \c maps/dungeons subdirectory contains important information for each dungeon.
See the \subpage dungeon_syntax page for the specification of those files.

\section tilesets Tilesets

The maps are composed of small bricks called "tiles".
The tiles are static: they cannot be moved or removed dynamically during the game.
They are opposed to all dynamic entities such as enemies, doors, bushes, switches, etc.
Each tile is a graphical element whose width and height are multiple of 8 pixels.
Tiles can overlap each other and have different sizes.
A tileset is a set of tiles that a map can use, you can call it the skin of the map.
For example, there may exist a tileset for the outside world, another one for the houses,
another one for the dungeons, etc.
The \c tilesets directory contains the tilesets and their images.
For each tileset, if we denote by XXXX its id (an integer number on four digits, like the maps),
we have three files:
- \c tilesetXXXX_tiles.png: the PNG image containing all tile images.
- \c tilesetXXXX.dat: the description file for tilesetXXXX_tiles.png. Each line describes a tile
with its size and its properties. See the \subpage tileset_syntax page for the detailed specification.
- \c tilesetXXXX_entities.png: some dynamic entities (i.e. other that tiles)
such as doors and blocks have a skin that actually depends on
the tileset. A door inside a dungeon has different graphics and colors from a door inside a cave.
Such dynamic entities are skin-dependent and we need to store their graphics in this file.
There is no description file (this file is organized the same way for each tileset).

\section items Items

The list of all items the player can get (e.g. the inventory items, the equipment items,
the treasures dropped by enemies or hidden under bushes, etc.) is specified in the
file \c items.dat.
This file as an ini-like syntax which is not specified in this documentation yet.
However, the syntax is entirely specified in the comments of the \c items.dat
file of the \c zsdx quest.

TODO specification of the format of items.dat

\c items.dat specifies the static properties of each item
(e.g. its number of variants, its probability to be dropped by an enemy,
its counter if any, etc.).
The dynamic properties of each item is defined by a Lua script
(e.g. what happens when the item appears, what happens when the player receives the
items, etc.).
These Lua scripts are located in the \c items subdirectory of the \c data
directory of your quest.

See the section \ref lua_api to know the Lua API provided by Solarus
to item scripts.

\section enemies Enemies

The properties and the behavior of each enemy is defined by a Lua script in the
\c enemies subdirectory of the \c data directory of your quest.

See the section \ref lua_api to know the Lua API provided by Solarus
to enemy scripts.

\section hud Head up display

The HUD includes the elements shown on the screen such as the icons,
the life bar, the money counter as well as the pause subscreens.
Most of the HUD is hardcoded in the C++ code of the engine, but eventually,
it will be defined by each quest as Lua scripts.
In the meantime, the \c hud subdirectory of the \c data directory of a
quest contains a single file \c inventory.dat.
\c inventory.dat defines the names of the 28 items that will be shown
in the inventory.

*/

