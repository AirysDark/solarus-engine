/**
\page lua_api_entity Map entities

\tableofcontents

Objects placed on the \ref lua_api_map "map"
are called map entities (or just entities).

There exists many types of entities. They can be either declared in the
\ref map_syntax "map data file", or created dynamically by using
the <tt>map:create_*</tt> methods of the \ref lua_api_map
"map API".

\section lua_api_entity_overview Overview

All entities have a position on the map (X, Y and layer)
and a size.
Depending on their type,
they can be visible or not. When they are visible,
they are usually represented by one or several
\ref lua_api_sprite "sprites".
Some entities are fixed, other move according to a
\ref lua_api_movement "movement" object.

Entities can also have a name that uniquely identifies them on the map.
This is useful to access them from the \ref lua_api_map "map API".
The name is optional, but if an entity has a name, it must be unique on the
map.

Here are the existing types of entities.
- \subpage lua_api_hero "Hero": The character controlled by the player.
- \subpage lua_api_tile "Tile": A small brick that composes a piece of the
  \ref lua_api_map "map", with a pattern picked
  from the tileset.
- \subpage lua_api_dynamic_tile "Dynamic tile": A special
  \ref lua_api_tile "tile"
  that can be enabled or disabled dynamically (\ref lua_api_tile "usual tiles"
  are optimized away at runtime).
- \subpage lua_api_teletransporter "Teletransporter": When walking on it, the
  \ref lua_api_hero "hero" is transported somewhere, possibly on
  the same \ref lua_api_map "map" or another map.
- \subpage lua_api_destination "Destination": A possible destination place for
  \ref lua_api_teletransporter "teletransporters".
- \subpage lua_api_pickable "Pickable treasure": A treasure placed on the ground
  and that the \ref lua_api_hero "hero" can pick up.
- \subpage lua_api_destructible "Destructible object": An entity that can be cut
  or lifted by \ref lua_api_hero "hero", and that may hide a
  \ref lua_api_pickable "pickable treasure".
- \subpage lua_api_carried_object "Carried object": A \ref lua_api_destructible
  "destructible object" lifted and carried by the \ref lua_api_hero "hero".
- \subpage lua_api_chest "Chest": A chest that contains a treasure.
- \subpage lua_api_shop_treasure "Shop treasure": A treasure that the \ref
  lua_api_hero "hero" can buy for a price.
- \subpage lua_api_enemy "Enemy": A bad guy (possibly a boss) who may also drop
  a \ref lua_api_pickable "pickable treasure" when killed.
- \subpage lua_api_npc "Non-playing character" (NPC): Somebody or something the
  \ref lua_api_hero "hero" can interact with.
- \subpage lua_api_block "Block": An entity that the \ref lua_api_hero "hero"
  can push or pull.
- \subpage lua_api_jumper "Jumper": When walking on it, the \ref lua_api_hero
  "hero" jumps into a direction.
- \subpage lua_api_switch "Switch": A button or another mechanism that the \ref
  lua_api_hero "hero" can activate.
- \subpage lua_api_sensor "Sensor": An invisible detector that detects the
  presence of the \ref lua_api_hero "hero".
- \subpage lua_api_wall "Wall": An invisible object that stops some kinds of
  entities.
- \subpage lua_api_crystal "Crystal": A switch that lowers or raises
  \ref lua_api_crystal_block "crystal blocks".
- \subpage lua_api_crystal_block "Crystal block": A low wall that can be
  lowered
  (travserable) or raised (obstacle) using a \ref lua_api_crystal "crystal".
- \subpage lua_api_conveyor_belt "Conveyor belt": When walking on it, the \ref
  lua_api_hero "hero" is moved into a direction.
- \subpage lua_api_door "Door": A door to open with an \ref lua_api_item
  "equipment item" or another condition.
- \subpage lua_api_stairs "Stairs": %Stairs between two \ref lua_api_map "maps"
  or to a platform of a single map.
- \subpage lua_api_bomb "Bomb": A bomb that will explode after a few seconds
  and that may be lifted by the \ref lua_api_hero "hero".
- \subpage lua_api_explosion "Explosion": An explosion that can hurt the
  \ref lua_api_hero "hero" and the \ref lua_api_enemy "enemies".
- \subpage lua_api_fire "Fire": A flame that can hurt
  \ref lua_api_enemy "enemies" and interact with other entities.
- \subpage lua_api_arrow "Arrow": An arrow shot by the bow.
- \subpage lua_api_hookshot "Hookshot": A hookshot shot by the
  \ref lua_api_hero "hero".
- \subpage lua_api_boomerang "Boomerang": A boomerang shot by the
  \ref lua_api_hero "hero".

\remark Note that \ref lua_api_sprite "sprites" and \ref lua_api_movement
"movements" are not map entities, but they can be attached to map entities
(to display them and to move them, respectively).
Sprites and movements can also be used outside a
\ref lua_api_map "map", for example in your title screen or in other
\ref lua_api_menu "menus".

\section lua_api_entity_methods Methods of all entity types

These methods exist in all entity types.

\subsection lua_api_entity_get_map entity:get_map()

Returns the map this entity belongs to.
- Return value (\ref lua_api_map "map"): The map that contains this entity.

\subsection lua_api_entity_get_name entity:get_name()

Returns the name of this map entity.

The name uniquely identifies the entity on the map.
- Return value (string): The name of this entity, or \c nil if the
  entity has no name (because the name is optional).

\subsection lua_api_entity_exists entity:exists()

Returns whether this entity still exists on the map.

An entity gets destroyed when you call
\ref lua_api_entity_remove "entity:remove()"
or when the engine removes it
(for example an \ref lua_api_enemy "enemy" that gets killed
or a \ref lua_api_pickable "pickable treasure" that gets picked up).
If you refer from Lua to an entity that no longer exists in the C++ side,
this method returns \c false.
- Return value (boolean): \c true if the entity exists, \c false if it was
  destroyed.

\subsection lua_api_entity_remove entity:remove()

Removes this entity from the map and destroys it.

After the entity is destroyed, \ref lua_api_entity_exists
"entity:exists()" returns \c false and there is no reason to keep a
reference to it in the Lua side (though it is harmless).

\subsection lua_api_entity_is_enabled entity:is_enabled()

Returns whether this entity is enabled.

When an entity is disabled, it is not displayed on the map, it does
not move and does not detect collisions.
But it still exists, it still has a position and it can be enabled again later.
- Return value (boolean): \c true if this entity is enabled.

\subsection lua_api_entity_set_enabled entity:set_enabled([enabled])

Enables or disables this entity.

When an entity is disabled, it is not displayed on the map, it does
not move and does not detect collisions.
But it still exists, it still has a position and it can be enabled again later.
- \c enabled (boolean, optional): \c true to enable the entity, \c false to
  disable it. No value means \c true.

\subsection lua_api_entity_get_size entity:get_size()

Returns the size of the bounding box of this entity.

The bounding box determines the position of the entity on the map.
It is a rectangle whose width and height are usually multiples
of 8 pixels.
The bounding box is used to detect whether the entity overlaps obstacles or
other entities.
- Return value 1 (number): Width of the entity in pixels.
- Return value 2 (number): Height of the entity in pixels.

\remark Note that the \ref lua_api_sprite "sprites" of an entity may have a
  different size than the entity itself.

\subsection lua_api_entity_get_origin entity:get_origin()

Returns the origin point of this entity, relative to the top-left corner
of its bounding box.

When an entity is located at some coordinates on the \ref lua_api_map "map",
the origin points determines what exact point of the entity's bounding box
is at those coordinates.
It is not necessarily the top-left corner of the entity's
bounding box.

The origin point is usually be the central point of contact between the entity
and the ground. For example, the origin point of the \ref lua_api_hero "hero",
\ref lua_api_enemy "enemies", \ref lua_api_npc
"non-playing characters" and most entities
is the center of their shadow.
Thus, for entities of size (<tt>16,16</tt>), the origin point is
often (<tt>8,13</tt>).

This origin point property allows entities of different sizes to have
comparable reference points that can be used by the engine.
Indeed, when two enemies overlap, the engine needs to determine which one
has to be displayed first
(it is always the one with the lowest Y coordinate).
Sometimes, the engine also needs to compute an angle between two entities,
for example to push away an enemy that was just hit.
Using the top-left corner of their bounding box would not give the correct
angle (unless both entities had the same size).

The origin point is also the point of synchronization of an entity with its
\ref lua_api_sprite "sprites" (because again, an entity that has a given
size may have sprites with different sizes).
- Return value 1 (number): X coordinate of the origin point in pixels,
  relative to the top-left corner of the entity's bounding box.
- Return value 2 (number): Y coordinate of the origin point in pixels,
  relative to the top-left corner of the entity's bounding box.

\subsection lua_api_entity_get_position entity:get_position()

Returns the position of this entity on the \ref lua_api_map "map"
(coordinates and layer).
- Return value 1 (number): X coordinate of the \ref lua_api_entity_get_origin
  "origin point" of the entity,
  relative to the top-left corner of the map.
- Return value 2 (number): Y coordinate of the \ref lua_api_entity_get_origin
  "origin point" of the entity,
  relative to the top-left corner of the map.
- Return value 3 (number): Layer where the entity is on the map
  (\c 0: low layer, \c 1: intermediate layer, \c 2: high layer).

\subsection lua_api_entity_set_position entity:set_position(x, y, [layer]):

Changes instantly the position of this entity on the map
(coordinates and layer).
The \ref lua_api_entity_get_origin "origin point" of the
entity gets placed at these coordinates,
relative to the map's top-left corner.
Any previous movement or other action performed by the entity
continues normally.
- \c x (number): X coordinate to set.
- \c y (number): Y coordinate to set.
- \c layer (number, optional): Layer to set
  (\c 0: low layer, \c 1: intermediate layer, \c 2: high layer).
  By default, the layer is unchanged.

\remark Be careful: this function does not check collisions with obstacles.

\subsection lua_api_entity_snap_to_grid entity:snap_to_grid()

Makes sure this entity's top-left corner is aligned with the 8*8 grid
of the \ref lua_api_map "map".

\remark Be careful: this function does not check collisions with obstacles.

\subsection lua_api_entity_get_distance entity:get_distance(x, y), entity:get_distance(other_entity)

Returns the distance in pixels between this map entity and a point or another
map entity.

To compute the distance to a specified point:
- \c x (number): X coordinate of the point.
- \c y (number): Y coordinate of the point.
- Return value (number): The distance in pixels between the origin point of
  this entity and the point.

To compute the distance to another map entity:
- \c other_entity (entity): The entity to compute the distance to.
- Return value (number): The distance in pixels between the origin point of
  this entity and the origin point of the other entity.

\subsection lua_api_entity_get_angle entity:get_angle(x, y), entity:get_angle(other_entity)

Returns the angle between the X axis and the vector that joins this entity
to a point.

To compute the angle to a specified point:
- \c x (number): X coordinate of the point.
- \c y (number): Y coordinate of the point.
- Return value (number): The angle in radians between the origin point of
  this entity and the specified point.

To compute the angle to another map entity:
- \c other_entity (entity): The entity to compute the angle to.
- Return value (number): The angle in radians between the origin point of
  this entity and the origin point of the other entity.

\subsection lua_api_entity_get_optimization_distance entity:get_optimization_distance()

Returns the optimization threshold of this map entity.

Above this distance from the visible area
of the map, the entity will be suspended.
A value of \c 0 means an infinite distance (the entity is never optimized away).
- Return value (number): The optimization distance in pixels.

\subsection lua_api_entity_set_optimization_distance entity:set_optimization_distance(optimization_distance)

Sets the optimization threshold of this map entity.

Above this distance from the visible area
of the map, the entity will be suspended.
A value of \c 0 means an infinite distance (the entity is never optimized away).
The default value depends on the type of entity and is usually fine,
but you may need to increase it in some cases, for example for an \ref lua_api_enemy "enemy" in a huge room.
- \c optimization_distance (number): The optimization distance to set in pixels.

\subsection lua_api_entity_test_obstacles entity:test_obstacles(dx, dy)

Returns whether there would be a collision with obstacles
if this map entity was translated.
- \c dx (number): X component of the translation in pixels
  (\c 0 means the current X position).
- \c dx (number): Y component of the translation in pixels
  (\c 0 means the current Y position).
- Return value (boolean): \c true if there would be a collision in this
position.

\subsection lua_api_entity_is_visible entity:is_visible([visible])

Returns whether this entity is visible.

When the entity is hidden, its sprites (if any) are not displayed, but
everything else continues normally, including collisions.
- Return value (boolean): \c true if the entity is visible.

\subsection lua_api_entity_set_visible entity:set_visible([visible])

Hides or shows the entity.

When the entity is hidden, its sprites (if any) are not displayed, but
everything else continues normally, including collisions.
- \c visible (boolean, optional): \c true to show the entity, \c false to hide
  it. No value means \c true.

\subsection lua_api_entity_get_movement entity:get_movement()

Returns the current movement of this map entity.
- Return value (\ref lua_api_movement "movement"): The current movement,
  or \c nil if the entity is not moving.

\subsection lua_api_entity_stop_movement entity:stop_movement()

Stops the current movement of this map entity if any.

\section lua_api_entity_events Events of all entity types

Events are callback methods automatically called by the engine if you define
them.

\subsection lua_api_entity_on_removed entity:on_removed()

Called when this entity is about to be removed from the map
(and therefore destroyed).

*/

